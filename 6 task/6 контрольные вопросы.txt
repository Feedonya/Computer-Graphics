1. Векторное произведение (crossM и cross):
Операции, реализуемые этими функциями, вычисляют векторное произведение двух векторов.

crossM возвращает матрицу антисимметричного оператора, что позволяет использовать матричное умножение для реализации векторного произведения.
cross выполняет вычисление по определению, используя детерминант. Оба метода эквивалентны и дают правильный результат.

---

2. Функция вычисляет длину вектора vec{p}, определяемую как:
|vec{p}| = sqrt{p_x^2 + p_y^2 + p_z^2}.
Функция `dot(vec3 p, vec3 p)` возвращает сумму квадратов компонентов p_x^2 + p_y^2 + p_z^2, а `sqrtf` вычисляет корень, давая длину.

---

3. Смысл реализации функции нормализации `norm(vec3 p)`
Функция `norm` преобразует вектор vec{p} в единичный (нормализованный) вектор vec{p}', длина которого равна 1. Это достигается делением каждого компонента на длину вектора |vec{p}|: vec{p}' = vec{p} / |vec{p}|.

---

4. Корректность формулы Родригеса с неединичным vec{n}
Формула Родригеса предполагает, что vec{n} единичный. Если |\vec{n}| != 1, то величина поворота будет масштабироваться длиной |\vec{n}|, что нарушает физический смысл вращения. Для корректного результата vec{n} нужно нормализовать.

---

5. Размеры модели из команды `model 4 8 16 8 16 32`
Эта команда задаёт границы модели в локальных координатах: x = [4, 8], y = [8, 16], z = [16, 32].  
Если преобразований масштабирования нет, размеры модели в мировой системе будут те же, что и в локальной:
\Delta x = 8 - 4 = 4, 
\Delta y = 16 - 8 = 8,
\Delta z = 32 - 16 = 16.

---

6. Смысл параметров команды `screen`
Параметры команды `screen` задают размеры и положение окна наблюдения (объём просмотра) в системе координат экрана. Они влияют на соотношение сторон, масштаб и центр области рендеринга. Параметры определяют границы области, проектируемой на экран, что меняет отображаемый размер сцены.

---

8. Специфика `lookAt` и замена `u_new` на `vec3(0, 1, 0)`
Вектор `u_new` (направление вверх) используется для задания ориентации камеры в пространстве. `lookAt`используется для вычисления нового ортонормального базиса, в котором направлением вверх становится заданный вектор, а ось Ox часто совпадает с направлением взгляда камеры.
Когда вращение происходит относительно оси, параллельной Ox, ориентация "вверх" относительно камеры не меняется (или меняется предсказуемо). Это позволяет подменить вычисление точного вектора `u_new` фиксированным направлением `vec3(0, 1, 0)`.

---

9. Почему изображение не меняется при движении вперед в прямоугольной проекции?
В прямоугольной проекции расстояние от наблюдателя до объектов сцены не влияет на их размеры на экране. Все объекты проецируются параллельно, поэтому движение вперед (изменение положения камеры) не меняет видимое изображение.

---

10. Почему в перспективной проекции изображение инвертируется при движении вперед?
В перспективной проекции объекты ближе к камере кажутся больше, а те, что находятся за точкой проецирования, инвертируются (зеркально отражаются). Это связано с особенностью математического преобразования: после прохождения точки камеры (где расстояние до объектов становится отрицательным) направление перспективных лучей меняется, что создает эффект "выворота".

---

11. Почему размеры уменьшаются при переключении на перспективу?
При переключении с прямоугольной проекции, где размеры постоянны, на перспективную объекты выглядят уменьшенными из-за расстояния до камеры.

---

12. Почему машина растягивается/сжимается при вращении?
При вращении используется неортогональная матрица преобразования, или искажаются оси координат (например, из-за неточного обновления матрицы модели). Это приводит к изменению соотношений сторон объекта.

---

13. Почему появляются отрезки при вращении куба
При вращении в перспективной проекции некоторые вершины куба могут перемещаться за пределы поля зрения камеры.

---

 14. Отличие проекций `Ortho` и `Frustum`
- `Ortho` (ортографическая проекция): Все линии параллельны, объекты не уменьшаются с расстоянием.
- `Frustum` (перспективная проекция): Линии сходятся к точке схода, объекты уменьшаются с увеличением расстояния.

---

 15. Разница между `Frustum` и `Perspective`
- `Frustum` задает произвольную усеченную пирамиду проекции.
- `Perspective` автоматически создает симметричный фрустум на основе угла обзора (FOV).

---

 16. Смысл кода для переноса/поворота камеры
Код изменяет матрицу модели или вида (`model`/`view`), обновляя позицию или ориентацию камеры. Для переноса добавляется вектор смещения, для поворота обновляется угол и пересчитывается новая ориентация камеры.

---

 17. Почему изображение растягивается при изменении размеров окна?
Пропорции изображения зависят от соотношения сторон окна. Изменение окна не учитывается в пересчете матрицы проекции. Ответственный код — пересчет матрицы `projection`.

---

 18. Изменение параметра `dist`
`dist` задает расстояние между камерой и объектом. Изменение этого параметра изменяет масштаб объекта в перспективной проекции или его положение в прямоугольной проекции.

---

 19. Изменение параметра `n`
- В прямоугольной проекции на изображение не влияет.
- В перспективной проекции изменение `n` изменяет видимую ближнюю плоскость отсечения, что влияет на то, какие объекты отображаются.

---

 20. Изменение параметра `f`
- В прямоугольной проекции на изображение не влияет.
- В перспективной проекции изменяет дальнюю плоскость отсечения, удаляя объекты за пределами заданного диапазона.

---

 21. Почему параметры `vec2(-1, -1)` и `vec2(2, 2)` в `cadrRL`?
Эти параметры задают координаты углов области отрисовки. Значения `(-1, -1)` и `(2, 2)` формируют "площадку" для отрисовки сцены в нормализованных координатах.

---

 22. Смысл действий в `initWorkPars`
"Решение треугольника" означает вычисление параметров, таких как углы, стороны или их соотношения. Код в `initWorkPars` отвечает за:
1. Инициализацию матрицы модели и проекции.
2. Расчет зависимых параметров для корректной визуализации сцены.

