//1 в изменении размера вычислить координаты квадрата от правого нижнего угла учитывая размер формы
//2 применить масштабирование 0.5 по х и у
//3 сначала транслейт потом скейл по s
//4 для отсечения отрезков по прямоугольной области, определить какие части отрезка видимы в заданной области и отсекает невидимые части
//5 2(4)
//6 в мировой СК
//7 алгоритм работает в ск экрана, а он работает в мировой до перехода в экранные коорды
//8 & 9 использовать побитовые операции 
// if((number &) 1 << bit_pos)) ==(!=) 0)
//10 потому что ск правая, а изначальный ротейт для левой
//11 Перевод угла из градусов в радианы: Для перевода угла из градусов в радианы нужно умножить угол на коэффициент π / 180:
//M = rotate(-theta / 180.f * Math::PI) * M; // добавляем поворот к общему преобразованию - 378 строка
//Преобразование выполняется в коде при работе с углами в функции, отвечающей за вращение объектов.
//12 модельное преобразование для координат из локальной в мировую ск
//13 Переход от мировой системы к экранной: Переход от мировой системы координат к экранной выполняется на этапе рендеринга, когда мировые координаты переводятся в координаты пикселей экрана.
//14 смещение по x y в мировой СК
//15 описание геом объектов которые необходимо отрисовать
//16 перенести на начало ск, масштабировние, прибавка 
// trx = (x - anchor_x) * S + anchor_x
// try = (y - anchor_y) * S + anchor_y
//17 прописать без преобразований
//18 можно, если каждая ломаная содержит полную информацию о пооложении масштабировании и др. преобразованиях
// 19. Заполнение прямоугольников рисунками: Чтобы рисунки заполняли прямоугольники полностью, необходимо изменить алгоритм масштабирования, чтобы размер рисунка равнялся размеру прямоугольника.