//1. Функция для вычисления скалярного произведения двумерных / четырехмерных векторов
//В `Matrix.h` должна быть функция для вычисления скалярного произведения, например, для двухмерных векторов `vec2` или четырехмерных `vec4`. В этой функции элементы вектора перемножаются попарно, а результат суммируется :
// ФАЙЛ Matrix.h строка 20
//В этом коде `dot` перемножает соответствующие компоненты векторов `v1` и `v2`, а затем складывает их.Этот метод используется для вычислений, таких как углы между векторами и проекции вектора.
//
//2. Метод для вычисления произведения двумерных / четырехмерных матриц
//Для двумерных матриц `mat3` в `Matrix.h` может быть написана функция, умножающая их:
// Matrix.h строка 227
//Этот метод вычисляет произведение матриц, где каждый элемент результата является суммой произведений соответствующих элементов строки матрицы `A` и столбца `B`.
//
//3. Смысл переменной `V` и выражения `V_work = mat2(T) * V;
//Переменная `V` обычно представляет собой вектор координат, например, точки в пространстве.Преобразование `V_work = mat2(T) * V; ` выполняет матричное преобразование вектора `V`, представляющего собой сдвиг, масштабирование или поворот, чтобы переместить `V` в новое положение.
//
//4. График как набор точек 
//Если график будет выводиться как набор точек, то он станет менее сглаженным, поскольку промежуточные точки между сегментами линии не будут соединены.Линии позволяют визуально соединить данные, что делает график более гладким и целостным.
//
//5. Назначение функции `f_exists`
//Функция `f_exists` определяет, существует ли значение функции в данной точке.Она возвращает `true` при допустимых значениях и `false` при недопустимых(например, разрыв функции).Она помогает избежать вычислений и отображения в точках, где функция неопределена.
//
//6. Параметр `delta` в функции `f_exists`
//`delta` может определять небольшое отклонение, чтобы проверить предел функции в определенной точке, или быть параметром, используемым для точности расчетов.Он может принимать значения, зависящие от масштаба или плотности точек.
//
//7. Реализация сдвига и масштабирования графика 
//Сдвиг и масштабирование графика обычно реализуются с помощью матриц преобразования в `Transform.h` (например, функции `translate` и `scale`).Эти преобразования изменяют координаты графика для создания эффекта перемещения и изменения размера.
//
//8. Сдвиг графика на 1 пиксель независимо от масштаба 
//Сдвиг на 1 пиксель в окне означает, что перемещение происходит в пиксельной сетке экрана.Однако это преобразование переводится в мировые координаты с учетом текущего масштаба, так что независимо от увеличения каждый шаг по координатам экрана остается одним пикселем.
//
//9. Эффект добавления поворота относительно центра 
//Если добавить поворот, график будет вращаться вокруг центра прямоугольника, что придаст эффект вращения всех его точек на указанный угол.
//
//10. Эффект зеркального отражения относительно оси 
//При добавлении зеркального отражения график будет отразен относительно выбранной оси, создавая зеркальное отображение всего изображения по горизонтали или вертикали.
//
//11. Растягивание графика при растяжении окна 
//График растягивается при изменении размеров окна из - за применения матричных преобразований, которые масштабируют график с учетом текущих размеров окна.Это достигается, изменяя параметры отображения в зависимости от размеров окна.
//
//12. Значение `deltaY` в обработчике события `Paint`
//Значение `deltaY` может выражать смещение вдоль оси `Y` в мировых координатах при рисовании, которое зависит от высоты экрана и масштаба.Это значение помогает позиционировать элементы графика.
//
//13. Вычисление зеленой составляющей цвета 
//Значение `510.f * deltaY` определяет интенсивность зеленого цвета, которая зависит от вертикальной позиции `deltaY`. Это позволяет плавно переходить от черного к зеленому, отражая положение на экране.
//
//14. Вычисление синей составляющей цвета 
//Синяя составляющая рассчитывается как `255.f - green`, чтобы дополнять зеленый компонент до значения 255. Это создает переход от синего к зеленому в зависимости от положения в нижней половине экрана.
//
//15. Функция для матрицы сдвига в `Transform.h`
// Transform.h строка 5
// 
//Функция создает матрицу сдвига на значения `Tx` и `Ty`, чтобы сдвинуть график на эти значения в мировой системе координат.
//
//16. Функция для матрицы масштабирования в `Transform.h`
// Transform.h строка 12
//
//Эта функция создает матрицу для изменения размера вдоль осей `X` и `Y`, используя коэффициенты `Sx` и `Sy`.
//
//По этому коду можно дать следующие ответы на ваши вопросы :
//
//Давайте разберем ответы на ваши вопросы в контексте данного кода :
//
//17. Укажите фрагмент кода построения трехмерного графика, в котором вычисляются размеры рабочего прямоугольника.
//
//Размеры рабочего прямоугольника вычисляются в методе `rectCalc`. Фрагмент, отвечающий за расчет размеров прямоугольника, выглядит так :
// MyForm.h строка 99
//
//18. Для чего нужна переменная `tmpEnd`? Почему бы там, где она используется, не использовать вместо нее просто значение `end`?
//
//Переменная `tmpEnd` используется для сохранения конечной точки отрезка до выполнения отсечения в методе `MyForm_Paint`. После отсечения `start` и `end` изменяются, чтобы представлять концы видимой части отрезка, поэтому `tmpEnd` помогает сохранить исходное значение `end`. Если использовать напрямую `end`, то это значение изменится после отсечения, и тогда мы потеряем исходную точку, которую нужно использовать как начальную для следующего отрезка.
//
//19. Укажите фрагмент кода `MyForm.h`, в котором происходит отсечение отрезка относительно рабочего прямоугольника.
//
//Отсечение отрезка относительно рабочего прямоугольника выполняется в методе `MyForm_Paint` с помощью функции `clip`. Фрагмент кода выглядит следующим образом :
//
//
//20. Что произойдет с проектом отрисовки трехмерного графика, если в нем снять ограничения значений переменных `Wx_part` и `Wy_part`?
//
//`Wx_part` и `Wy_part` определяют долю от общего прямоугольника, которая используется для отображения графика, ограничивая размеры рабочего прямоугольника.Если убрать ограничения значений этих переменных(например, разрешить значения больше 1.0), то размеры рабочего прямоугольника могут превысить размеры окна.Это приведет к некорректному отображению графика, поскольку прямоугольник для отрисовки может выйти за пределы области видимости, что повлияет на визуальное восприятие и производительность.